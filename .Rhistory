T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:20], Ts[21:40])
abline(0, 1)
plot(Ts[1:100], Ts[101:200])
abline(0, 1)
source('/Volumes/home02/SachsMc/Applied Projects/Bayesian Meta Analysis/Code/biowulf sims/jags-assets.R')
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:100], Ts[101:200])
abline(0, 1)
source('/Volumes/home02/SachsMc/Applied Projects/Bayesian Meta Analysis/Code/biowulf sims/jags-assets.R')
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:100], Ts[101:200])
abline(0, 1)
beep()
n.trials <- 20; beta <- c(0, 1, 0); tau1 <- c(.1, .1); rho1 <- 0;
scale1 <- se1 <- c(.07, .07); scale2 <- se2 <- 1; tau2 <- .05; mu1 <- c(2,2)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2)
true.Ts <- true.Ts.all
this.super.pop <- swank.super.population(super.size = 2000, n.trials, beta, mu1, tau1, rho1, tau2, nclusters = 1, cluster_spacing = 1, model = "linear")
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 5,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:100], Ts[101:200])
abline(0, 1)
beep()
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
n.trials <- 100; beta <- c(0, 1, 0); tau1 <- c(.1, .1); rho1 <- 0;
scale1 <- se1 <- c(.07, .07); scale2 <- se2 <- 1; tau2 <- .05; mu1 <- c(2,2)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "polynomial")
true.Ts <- true.Ts.all
this.super.pop <- swank.super.population(super.size = 2000, n.trials, beta, mu1, tau1, rho1, tau2, nclusters = 1, cluster_spacing = 1, model = "linear")
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 5,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
plot(T2 ~ T1.a, true.Ts)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "linear", nclusters = 2, cluster_spacing = 2)
true.Ts <- true.Ts.all
n.trials <- 100; beta <- c(0, 1, 0); tau1 <- c(.1, .1); rho1 <- 0;
scale1 <- se1 <- c(.07, .07); scale2 <- se2 <- 1; tau2 <- .05; mu1 <- c(2,2)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "linear", nclusters = 2, cluster_spacing = 2)
true.Ts <- true.Ts.all
this.super.pop <- swank.super.population(super.size = 2000, n.trials, beta, mu1, tau1, rho1, tau2, nclusters = 1, cluster_spacing = 1, model = "linear")
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 5,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
plot(s)
n.simu <- 5000
n.burnin <- 10000
n.trials <- 20; beta <- c(0, 1, 0); tau1 <- c(.1, .1); rho1 <- 0;
scale1 <- se1 <- c(.07, .07); scale2 <- se2 <- 1; tau2 <- .05; mu1 <- c(2,2)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "linear", nclusters = 2, cluster_spacing = 2)
true.Ts <- true.Ts.all
this.super.pop <- swank.super.population(super.size = 2000, n.trials, beta, mu1, tau1, rho1, tau2, nclusters = 1, cluster_spacing = 1, model = "linear")
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "linear", nclusters = 8, cluster_spacing = .5)
true.Ts <- true.Ts.all
this.super.pop <- swank.super.population(super.size = 2000, n.trials, beta, mu1, tau1, rho1, tau2, nclusters = 1, cluster_spacing = 1, model = "linear")
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "threshold", nclusters = 8, cluster_spacing = .5)
true.Ts <- true.Ts.all
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
source('/Volumes/home02/SachsMc/Applied Projects/Bayesian Meta Analysis/Code/biowulf sims/jags-assets.R')
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "threshold", nclusters = 8, cluster_spacing = .5)
true.Ts <- true.Ts.all
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)[c(5, 10, 15)]))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
plot(T2 ~ T1.a, true.Ts)
plot(s)
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
plot(T2 ~ T1.a, true.Ts)
plot(true.Ts$T2  ~ Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
plot(true.Ts$T2  ~ Ts[1:nrow(true.Ts)])
Ts
plot(true.Ts$T2  ~ Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0,1)
n.trials <- 20; beta <- c(0, 1, 0); tau1 <- c(.1, .1); rho1 <- 0;
scale1 <- se1 <- c(.07, .07); scale2 <- se2 <- 1; tau2 <- .05; mu1 <- c(2,2)
true.Ts.all <- swank.true.Ts(n.trials, beta, mu1 = c(2,2), tau1, rho1, tau2, model = "linear", nclusters = 8, cluster_spacing = .5)
true.Ts <- true.Ts.all
test <- swank.estimated.Ts(true.Ts, scale1, scale2)
hat.test <- test$trial.level
D.true <- with(true.Ts, list(T2.hat = T2, T1.hat = T1.a, n.trials = 20))
D <- with(hat.test, list(T2.hat = T2.hat, T1.hat = T1.a.hat, M = 15,
T1.se = T1.a.se, T2.se = T2.se, n.trials = length(T2.hat), knots = sort(T1.a.hat)))
D.bi <- with(hat.test, list(T2.hat = T2.hat, T1.a.hat = T1.a.hat, T1.b.hat = T1.b.hat,
T1.a.se = T1.a.se, T1.b.se = T1.b.se, T2.se = T2.se, M = 20,
n.trials = 20, knots = sort(T1.a.hat),
knotsb = sort(T1.b.hat)))
par <- c("T1", "T2", "prob", "mu", "beta", "bbb")
m.jags <- jags.model("uni-spline_DPP.bug", data = D, n.adapt = n.burnin,
quiet = FALSE, n.chains = 2)
s <- coda.samples(m.jags, par, n.iter = n.simu , thin = 50, quiet = FALSE)
#plot(s)
Ts <- summary(s)$statistics[,1]
plot(Ts[1:nrow(true.Ts)], Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0, 1)
beep()
plot(true.Ts$T2  ~ Ts[(nrow(true.Ts) + 1) : (2 * nrow(true.Ts))])
abline(0,1)
?any
library(splines)
?bs
bs(rnorm(100))
library(lmer)
library(lme4)
?lmer
methods(class="merMod")
?predict.merMod
?simulate.merMod
install.packages("gridSVG")
library(gridSVG)
library(ggplot2)
topvp <- viewport(y = 1, just = "top", name = "topvp", height = unit(1, "lines"))
library(grid)
topvp <- viewport(y = 1, just = "top", name = "topvp", height = unit(1, "lines"))
botvp <- viewport(y = 0, just = "bottom", name = "botvp", height = unit(1, "npv") - unit(1, "lines"))
botvp <- viewport(y = 0, just = "bottom", name = "botvp", height = unit(1, "npc") - unit(1, "lines"))
grid.rect(gp = gpar(fill="grey"), vp = topvp, name = "toprect")
grid.rect(vp = botvp, name = "botrect")
gridToSVG("step1.svg")
?grid.export
grid.export("step1.svg")
grid.export(NULL)
fig_path('.svg')
source('~/.active-rstudio-document', echo=TRUE)
fig_path()
fig_path(".svg")
source('~/.active-rstudio-document', echo=TRUE)
clearviewport
clearviewport()
topvp <- viewport(y = 1, just = "top", name = "topvp", height = unit(1, "lines"))
botvp <- viewport(y = 0, just = "bottom", name = "botvp", height = unit(1, "npc") - unit(1, "lines"))
grid.rect(gp = gpar(fill="grey"), vp = topvp, name = "toprect")
grid.rect(vp = botvp, name = "botrect")
grid.export
grid.export(NULL, exportJS = "none")
topvp <- viewport(y = 1, just = "top", name = "topvp", height = unit(1, "lines"))
botvp <- viewport(y = 0, just = "bottom", name = "botvp", height = unit(1, "npc") - unit(1, "lines"))
grid.rect(gp = gpar(fill="grey"), vp = topvp, name = "toprect")
grid.rect(vp = botvp, name = "botrect")
grid.export(NULL, exportJS = "none")
names(grid.export(NULL, exportJS = "none"))
?geom_point
?grid.export
?scale_y_continuous
?grid.garnish
ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
grid.ls()
grid.garnish
paste("geom_point.points.2.1", i, sep = ".")
i <- 1
paste("geom_point.points.2.1", i, sep = ".")
mtcars$cyl[i]
library(ggplot2)
library(gridSVG)
library(grid)
ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
for(i in 1:5){
grid.garnish(paste("geom_point.points.2.1", i, sep = "."),
fill="green", group = FALSE)
}
grid.ls()
?grid.garnish
grid.ls(geom_point.points.50)
p <- ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
grid.ls(p)
grid.ls(x = p)
names(p)
str(p)
ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
grid.ls()
p <- ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
p
g <- ggplotGrob(p)
grid.ls(g)
?getGrob
class(g)
getGrob(g)
grid.ls(g)
?grid.ls
grid.Ls(g)
p <- ggplot(mtcars, aes(x = mpg, y = hp)) + geom_point(size = 5) + stat_smooth() +
scale_y_continuous(limits = c(-50, 500)) + scale_x_continuous(limits = c(0, 50))
p
g <- ggplotGrob(p)
grid.ls(g)
grid.ls
grid.ls(g, viewports = TRUE)
(qnorm(.975) + qnorm(.8))^2 * (.3 * .7 * log(.52)^2)^(-1)
(qnorm(.975) + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
(qnorm(.95)/2 + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
(qnorm(.95)*2 + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
(qnorm(.95) + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
(qnorm(.925) + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
(qnorm(.975) + qnorm(.8))^2 * (.3 * .7 * log(.6)^2)^(-1)
curve(x/(1-x), 0, 1)
?loglin
X <- cbind(rnorm(20), rnorm(20, 5))
X
I <- sample(1:2, 20)
I <- sample(20, 1:2)
I
I <- sample(1:2, 20, replace = TRUE)
I
X[,I]
diag(X[,I])
X
I
devtools::install_github("devtools", "hadley")
library(devtools)
?devtools
setwd("/Volumes//home02/SachsMc/R projects/")
library(pkgKitten)
?kitten
kitten(name = "rclinicaltrials", author = "Michael Sachs", email = "sachsmc@gmail.com", license = "MIT + file LICENSE")
setwd("./rclinicaltrials/")
use_testthat()
library(devtools)
use_testthat()
add_test_infrastructure()
add_rstudio_project()
library(httr)
?POST
query_url <- "http://clinicaltrials.gov/ct2/results?"
query = 'heart disease AND stroke AND California'
# paste queries together with '&'
paste_query <-
function(query)
{
if(is.null(query) || length(query)==1) return(query)
paste(query, collapse="&")
}
query <- paste_query(query)
query
httr::POST(query_url,
body=list(search_query=query))
?modify_url
search_result <- httr::POST(paste0(query_url, query))
listresult <- result2list(search_result)
install.packages("XML")
library(XML)
httr::stop_for_status(search_result)
doc <- XML::xmlParse(httr::content(searchresult, "text"), asText=TRUE)
doc <- XML::xmlParse(httr::content(search_result, "text"), asText=TRUE)
?xmlParse
doc <- XML::htmlParse(httr::content(search_result, "text"), asText=TRUE)
search_result
content(search_result)
query_url <- "http://clinicaltrials.gov/ct2/results?term="
query <- paste_query(query)
# do search
search_result <- httr::POST(paste0(query_url, query))
doc <- XML::xmlParse(httr::content(search_result, "text"), asText=TRUE)
doc <- XML::htmlParse(httr::content(search_result, "text"), asText=TRUE)
httr::content(search_result, "text")
?content
search_result
query <- gsub(" ", "+", query, fixed = TRUE)
query
# paste queries together with '&'
paste_query <-
function(query)
{
query <- gsub(" ", "+", query, fixed = TRUE)
if(is.null(query) || length(query)==1) return(query)
paste(query, collapse="&")
}
query_url <- "http://clinicaltrials.gov/ct2/results?term="
query <- paste_query(query)
# do search
search_result <- httr::POST(paste0(query_url, query))
search_resutl
search_result
content(search_result)
content(search_result, as = "text")
search_result
search_result <- httr::GET(paste0(query_url, query))
search_result
content(search_result)
XML::htmlParse(content(search_result))
content(search_result, as = "parse")
class(content(search_result, as = "parse"))
class(content(search_result, as = "text"))
parsed_result <- XML::htmlParse(content(search_result, as = "text"))
parsed_result
class(parsed_result)
parsed_result["div"]
getNodeSet(parsed_result, "//record[@class='results-summary']")
print(getNodeSet(parsed_result, "//record[@class='results-summary']"))
as.character(getNodeSet(parsed_result, "//record[@class='results-summary']"))
?getNodeSet
xpathSApply(parsed_result, "//*/div[@class='results-summary']", xmlValue)
cat(xpathSApply(parsed_result, "//*/div[@class='results-summary']", xmlValue))
query <- NULL
query_url <- "http://clinicaltrials.gov/ct2/results?term="
query <- paste_query(query)
# do search
search_result <- httr::GET(paste0(query_url, query))
parsed_result <- XML::htmlParse(content(search_result, as = "text"))
# extract search results div
result_string <- xpathSApply(parsed_result, "//*/div[@class='results-summary']", xmlValue)
result_string
query <- "aw4tyqiu4h3t"
query_url <- "http://clinicaltrials.gov/ct2/results?term="
query <- paste_query(query)
# do search
search_result <- httr::GET(paste0(query_url, query))
parsed_result <- XML::htmlParse(content(search_result, as = "text"))
# extract search results div
result_string <- xpathSApply(parsed_result, "//*/div[@class='results-summary']", xmlValue)
query_url <- "http://clinicaltrials.gov/ct2/results?term="
query <- paste_query(query)
# do search
search_result <- httr::GET(paste0(query_url, query))
parsed_result <- XML::htmlParse(content(search_result, as = "text"))
# extract search results div
result_string <- xpathSApply(parsed_result, "//*/div[@class='results-summary']", xmlValue)
result_string
result <- as.integer(result_string)
result
strsplit(result_string, " ")
?grep
amount <- split_string[study_list[1] - 1]
split_string <- strsplit(result_string, " ")[[1]]
# find the first occurance of 'study' or 'studies'
study_list <- grep("study|studies", split_string)
stopifnot(length(study_list) > 0)
amount <- split_string[study_list[1] - 1]
amount
as.integer("4")
?expect
?expect_equal
?expect_more_than
library(XML)
?xmlValue
# paste queries together with '&'
paste_query <-
function(query)
{
query <- gsub(" ", "+", query, fixed = TRUE)
if(is.null(query) || length(query)==1) return(paste0("term=", query))
paste(query, collapse="&")
}
query <- "kajshdg028345245lkj"
query_url <- "http://clinicaltrials.gov/ct2/results?"
query <- paste_query(query)
# do search
search_result <- httr::GET(paste0(query_url, query))
search_result
httr::stop_for_status(search_result)
?stop_for_status
httr::http_status(search_result)
search_result$status
