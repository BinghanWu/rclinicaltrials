})
xmlApply(period, function(node){
#cbind(title = xmlValue(node),
xmlSApply(node[[2]], xmlAttrs)
})
xmlApply(period, function(node){
#cbind(title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)))
})
xmlApply(period, function(node){
#cbind(title = xmlValue(node),
as.data.frame(t(xmlSApply(node[[2]], xmlAttrs)))
})
?data.frame
group_lookup
xmlApply(period, function(node){
#cbind(title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:nrow(group_lookup))
})
xmlApply(period, function(node){
cbind(
title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:nrow(group_lookup))
)
})
do.call(rbind, xmlApply(period, function(node){
cbind(
title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:nrow(group_lookup))
)
}))
group_lookup
flow_table <- do.call(rbind, xmlApply(period, function(node){
cbind(
title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:nrow(group_lookup), stringsAsFactors = FALSE)
)
}))
flow_table$group <- group_lookup[flow_table$group_id, "V2"]
flow_table
parsed[["//baseline/group_list"]]
group_list <- parsed[["//participant_flow/group_list"]]
group_lookup <- as.data.frame(t(xmlSApply(group_list, function(node) c(xmlAttrs(node), xmlValue(xmlChildren(node)$title)))))
group_look <- group_lookup[,2]
names(group_look) <- group_lookup$group_id
period <- parsed[["//period_list/period/milestone_list"]]
flow_table <- do.call(rbind, xmlApply(period, function(node){
cbind(
title = xmlValue(node),
data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:nrow(group_lookup), stringsAsFactors = FALSE)
)
}))
flow_table$group <- group_look[flow_table$group_id]
flow_table
gp_list <- parsed[["//baseline/group_list"]]
measures <- parsed[["//baseline/measure_list"]]
get_group_lookup <- function(parsed, xpath){
group_list <- parsed[[xpath]]
group_lookup <- as.data.frame(t(xmlSApply(group_list, function(node) c(xmlAttrs(node), xmlValue(xmlChildren(node)$title)))))
group_look <- group_lookup[,2]
names(group_look) <- group_lookup$group_id
group_look
}
gp_look <- get_group_lookup(parsed, "//participant_flow/group_list")
gp_look
get_group_lookup <- function(parsed, xpath){
group_list <- parsed[[xpath]]
group_lookup <- as.data.frame(t(xmlSApply(group_list, function(node) c(xmlAttrs(node), xmlValue(xmlChildren(node)$title)))), stringsAsFactors = FALSE)
group_look <- group_lookup[,2]
names(group_look) <- group_lookup$group_id
group_look
}
gp_look <- get_group_lookup(parsed, "//participant_flow/group_list")
gp_look
gp_look <- get_group_lookup(parsed, "//baseline/group_list")
gp_look
measures <- parsed[["//baseline/measures"]]
measures <- parsed[["//baseline/measure_list"]]
measures
xmlApply(measures, function(node){
#  cbind(
title = xmlValue(node)
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
title = node
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
title = node[[1]]
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
xmlValue(node)
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
xmlSapply(node, xmlValue)
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
xmlSApply(node, xmlValue)
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
xmlSApply(node, function(n){
tmpVal <- xmlValue(n)
if(names(tmpVal) == "category_list") tmpVal <- xmlSApply(n, xmlValue)
tmpVal
})
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
xmlApply(measures, function(node){
#  cbind(
xmlSApply(node, function(n) names(xmlValue(n)))
#function(n){
#  tmpVal <- xmlValue(n)
#  if(names(tmpVal) == "category_list") tmpVal <- xmlSApply(n, xmlValue)
#  tmpVal
#  })
#  data.frame(t(xmlSApply(node[[2]], xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
#)
})
measures
measures[["//category_list"]]
measures[["/category_list"]]
measures
measures[["//measure/category_list"]]
measures[["//measure"]]
measures
measures[["//measure"]]
measures[["//measure_list"]]
measures[[1]]
measures[[1]][[4]]
measures[["*/sub_title"]]
class(measures)
class(measures[[1]])
class(measures[1)
class(measures[1])
measures[1][["//sub_title"]]
measures[1][["*//sub_title"]]
?XML
?xmlValue
class(parsed)
names(parsed)
names(measures)
measures[["measure"]]
measures[["sub_title"]]
measures["sub_title"]
getNodeSet(measures)
getNodeSet(measures, "//sub_title")
getNodeSet(measures, "//baseline//sub_title")
measures
measures[[1]]
xmlApply(measures, function(node){
#outer most level: titles and units
xmlSApply(node, xmlValue)
})
node <- measure[[1]]
node <- measures[[1]]
node
name(node)
names(node)
xmlName(node)
xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
node <- measures[[2]]
node
xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
tei <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
tei
data.frame(tei)
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
if(is.list(lank)) data.frame(lank) else lank
})
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
data.frame(lank)
})
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
if(is.list(lank)) data.frame(lank) else data.frame(t(lank))
})
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlSApply(n, xmlValue)
} else {
xmlValue(n)
}
})
names(lank)[names(lank) == "category_list.category"] <- "category_list"
if(is.list(lank)) data.frame(lank) else data.frame(t(lank))
})
node
n
node
node[[4]]
n <- node[[4]]
xmlSApply(n, function(n0){
cbind(xmlValue(n0),
xmlAttrs(xmlChildren(n0)))
})
?xmlChildren<-
?xmlChildren
xmlSApply(n, function(n0){
cbind(xmlValue(n0),
xmlAttrs(getNodeSet(n0, "//measurement")))
})
xmlSApply(n, function(n0){
cbind(xmlValue(n0),
xmlSApply(getNodeSet(n0, "//measurement"), xmlAttrs))
})
xmlApply(n, function(n0){
cbind(xmlValue(n0),
xmlSApply(getNodeSet(n0, "//measurement"), xmlAttrs))
})
n
xmlApply(n, function(n0){
cbind(xmlValue(n0),
xmlSApply(n0[[2]], xmlAttrs))
})
xmlApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
xmlApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
} else {
xmlValue(n)
}
})
lank
data.frame(lank)
xmlApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
xmlSApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
t(xmlSApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
}))
xmlApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
jte <- xmlApply(n, function(n0){
cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs)))
})
data.frame(jte)
do.call(rbind, jte)
do.call(rbind.fill, jte)
xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs))))
})
xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs))), row.names = 1:length(gp_look))
})
tji <- xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs))), row.names = 1:length(gp_look))
})
do.call(rbind.fill, tji)
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs))), row.names = 1:length(gp_look))
}))
} else {
xmlValue(n)
}
})
lank
measures
node <- measures[[2]]
node
node <- measures[[3]]
node
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[[2]], xmlAttrs))), row.names = 1:length(gp_look))
}))
} else {
xmlValue(n)
}
})
?getNodeSet
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(getNodeSet(n0, "//category_list"), xmlAttrs))), row.names = 1:length(gp_look))
}))
} else {
xmlValue(n)
}
})
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(getNodeSet(n0, "//category_list"), xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
lank
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["category_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
node
n <- node[[5]]
n
xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["category_list"]], xmlAttrs))), row.names = NULL)
}))
xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["category_list"]], xmlAttrs))), row.names = NULL)
})
n
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
lank
do.call(rbind.fill, lank)
ldply(lank, as.data.frame)
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
lank
})
lank
lank[-"category_list"]
names(lank) != "category_list"
lank[names(lank) != "category_list"]
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
fillout
data.frame(fillout)
cbind(fillout, target)
xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
})
do.call(plyr::rbind.fill, xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
baseline_table <- do.call(plyr::rbind.fill, xmlApply(measures, function(node){
#outer most level: titles and units
lank <- xmlSApply(node, function(n){
# category_list -> return sub-titles
if(xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, xmlApply(n, function(n0){
data.frame(cbind(xmlValue(n0),
t(xmlSApply(n0[["measurement_list"]], xmlAttrs))), row.names = NULL)
}))
} else {
xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
baseline_table
colnames(baseline_table[colnames(baseline_table) == "V1"]) <- "label"
baseline_table$arm <- gp_look[baseline_table$group_id]
baseline_table
parsed
parsed[["//outcome_list"]]
