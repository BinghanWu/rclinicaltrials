do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
if(is.list(tmpRes)) ResAdd <- do.call(plyr::rbind.fill, tmpRes) else {
ResAdd <- t(tmpRes)
}
data.frame(
cbind(
XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
node
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
if(is.list(tmpRes)) ResAdd <- do.call(plyr::rbind.fill, tmpRes) else {
ResAdd <- t(tmpRes)
}
data.frame(
cbind(
XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
baseline_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
if(is.list(tmpRes)) ResAdd <- do.call(plyr::rbind.fill, tmpRes) else {
ResAdd <- t(tmpRes)
}
data.frame(
cbind(
XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
measures
node <- measures[[1]]
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
if(is.list(tmpRes)) ResAdd <- do.call(plyr::rbind.fill, tmpRes) else {
ResAdd <- t(tmpRes)
}
data.frame(
cbind(
XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
node
n <- node[[4]]
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
if(is.list(tmpRes)) ResAdd <- do.call(plyr::rbind.fill, tmpRes) else {
ResAdd <- t(tmpRes)
}
data.frame(
cbind(
XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
n
n0 <- n[[1]]
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x) as.data.frame(t(XML::xmlAttrs(x))))
tmpRes
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)), stringsAsFactors = FALSE)
})
tmpRes
n0
n0[["measurement_list"]]
x <- n0[["measurement_list"]][[1]]
XML::xmlAttrs(x)
as.data.frame(XML::xmlAttrs(x))
t(as.data.frame(XML::xmlAttrs(x), stringsAsFactors = FALSE))
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x){
t(as.data.frame(XML::xmlAttrs(x), stringsAsFactors = FALSE))
})
tmpRes
ResAdd <- t(tmpRes)
ResAdd
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x){
as.data.frame(XML::xmlAttrs(x), stringsAsFactors = FALSE)
})
tmpRes
do.call(plyr::rbind.fill, tmpRes)
tmpRes
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x){
data.frame(XML::xmlAttrs(x), stringsAsFactors = FALSE)
})
tmpRes
x
XML::xmlAttrs(x)
XML::xmlAttrs(x)
tmpRes <- XML::xmlSApply(n0[["measurement_list"]], function(x){
XML::xmlAttrs(x)
})
tmpRes
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
XML::xmlAttrs(x)
})
tmpRes
do.call(plyr::rbind.fill, tmpRes)
do.call(function(x) plyr::rbind.fill(lapply(x, as.data.frame)), tmpRes)
tmpRes[[1]]
data.frame(tmpRes[[1]])
data.frame(t(tmpRes[[1]]))
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
tmpRes
do.call(plyr::rbind.fill, tmpRes)
measure
measures
node <- measures[[2]]
n <- node[[1]]
n
n <- node[[2]]
n
n <- node[[5]]
n
x <- n[["measurement"]]
x
x <- n[["//measurement"]]
x
x <- n[[1]][[1]]
x
x <- n[[1]][[1]][[1]]
as.data.frame(t(XML::xmlAttrs(x)))
n0 <- n[[1]][[1]]
n0
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
n0 <- n[[1]]
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
tmpRes
do.call(plyr::rbind.fill, tmpRes)
ResAdd <- do.call(plyr::rbind.fill, tmpRes)
n0
XML::xmlValue(n0)
data.frame(
cbind(
title = XML::xmlValue(n0),
ResAdd),
row.names = NULL)
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
ResAdd <- do.call(plyr::rbind.fill, tmpRes)
data.frame(
cbind(
title = XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
lank
baseline_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
ResAdd <- do.call(plyr::rbind.fill, tmpRes)
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
baseline_table
check <- tryCatch(parsed[["//clinical_results"]],  error = function(e) {
return(NULL)
})
this_nct_id <- XML::xmlValue(parsed[["//nct_id"]])
## participant flow
gp_look <- get_group_lookup(parsed, "//participant_flow/group_list")
period <- parsed[["//period_list/period/milestone_list"]]
flow_table <- do.call(plyr::rbind.fill, XML::xmlApply(period, function(node){
cbind(
title = XML::xmlValue(node),
data.frame(t(XML::xmlSApply(node[[2]], XML::xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
)
}))
flow_table$arm <- gp_look[flow_table$group_id]
flow_table$nct_id <- this_nct_id
## baseline
gp_look <- get_group_lookup(parsed, "//baseline/group_list")
measures <- parsed[["//baseline/measure_list"]]
baseline_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
ResAdd <- do.call(plyr::rbind.fill, tmpRes)
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
baseline_table$arm <- gp_look[baseline_table$group_id]
baseline_table$nct_id <- this_nct_id
## outcomes
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
colnames(results_table[colnames(results_table) == "V1"]) <- "label"
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
measures
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
colnames(results_table[colnames(results_table) == "V1"]) <- "label"
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
parsed[["//clinical_results/outcome_list"]]
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
final_outcome_table <- do.call(plyr::rbind.fill, all_results_list)
final_outcome_table$nct_id <- this_nct_id
final_outcome_table
devtools::load_all(".")
do.call(plyr::rbind.fill, list(mtcars, NULL))
devtools::load_all(".")
info_list <- lapply(xml_list, parse_study_xml, include_textblocks, include_results)
info_list
do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list))
chke <- do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list))
chke$outcomes
info_list
?mapply
library(plyr)
?rbind.fill
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
results_list <- lapply(xml_list, function(file) gather_results(XML::xmlParse(file)))
file
gather_results(XML::xmlParse(file))
file <- xml_list[1]
gather_results(XML::xmlParse(file))
parsed <- (XML::xmlParse(file))
parsed[["//clinical_results"]]
tryCatch(parsed[["//clinical_results"]],  error = function(e) {
return(NULL)
})
devtools::load_all(".")
devtools::load_all(".")
results_list <- lapply(xml_list, function(file) gather_results(XML::xmlParse(file)))
results_list
do.call("mapply", args = c(FUN = plyr::rbind.fill, results_list))
length(results_list)
devtools::load_all(".")
results_list <- lapply(xml_list, function(file) gather_results(XML::xmlParse(file)))
do.call("mapply", args = c(FUN = plyr::rbind.fill, results_list))
do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list))
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list))
lapply(info_list, function(x) x$outcomes)
file <- xml_list[1]
parsed <- XML::xmlParse(file)
date_disclaimer <- XML::xmlValue(parsed[["//download_date"]])
ids <- as.data.frame(XML::xmlToList(parsed[["//id_info"]])[c("org_study_id", "nct_id")], stringsAsFactors = FALSE)
## basic study info
infoterms <- c("brief_title", "official_title", "overall_status", "start_date", "completion_date", "lead_sponsor/agency",
"phase", "study_type", "study_design", "enrollment", "primary_condition", "primary_outcome", "eligibility")
study_info <- ids
for(i in 1:length(infoterms)){
if(infoterms[i] == "primary_condition"){
infoterm <- "condition"
study_info[infoterms[i]] <- XML::xmlValue(parsed[paste0("//", infoterm)][[1]])
} else {
infoterm <- infoterms[i]
tmpField <- tryCatch(lapply(parsed[paste0("//", infoterm)], XML::xmlToList), error = function(e) NA)
tmpField <- as.data.frame(tmpField)
if(nrow(tmpField) == 0) next
tmpField[["textblock"]] <- NULL
if(ncol(tmpField) > 1) colnames(tmpField) <- paste(infoterm, colnames(tmpField), sep = ".") else
colnames(tmpField) <- infoterm
study_info <- cbind(study_info, tmpField)
if(infoterm == "completion_date") study_info["completion_date_type"] <- tryCatch(XML::xmlAttrs(parsed[[paste0("//", infoterm)]])["type"], error = function(e) NA)
}
}
study_info$date_disclaimer <- date_disclaimer
interventions <- xmltodf(parsed, "//intervention")
if(nrow(interventions) > 0){
interventions$nct_id <- ids$nct_id
}
if(include_textblocks){
## big text fields
textblocks <- xmltodf(parsed, "//textblock")
if(nrow(textblocks) > 0){
textblocks$nct_id <- ids$nct_id
}
} else textblocks <- NULL
## locations
locations <- xmltodf(parsed, "//facility")
if(nrow(locations) > 0){
locations$nct_id <- ids$nct_id
}
## outcomes
outcometerms <- c("primary_outcome", "secondary_outcome", "other_outcome")
outcomes <- NULL
for(i in 1:length(outcometerms)){
outterm <- outcometerms[i]
tmpField <- tryCatch(plyr::ldply(parsed[paste0("//", outterm)], function(x){
as.data.frame(XML::xmlToList(x))
}), error = function(e) data.frame(measure = NA))
if(nrow(tmpField) == 0) next
tmpField$type <- outterm
outcomes <- plyr::rbind.fill(outcomes, tmpField)
}
outcomes
length(outcomes)
nrow(outcomes)
nrow(outcomes) > 0
devtools::load_all(".")
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list))
devtools::load_all(".")
che <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
che
che$results
che$study_results
names(che)
che$study_info
query = 'heart disease AND stroke AND California'
count <- 5
frame <- NULL
if(is.null(frame)){
frame <- clinicaltrials_search(query, count)
}
query_url <- "http://clinicaltrials.gov/ct2/results?id="
final_url <- paste0(query_url, paste(frame$nct_id, collapse = "+OR+"))
inc_res <- ifelse(include_results, "&resultsxml=true", "&studyxml=true")
search_result <- httr::GET(paste0(final_url, inc_res))
## download and unzip to a temporary directory
tmpzip <- tempfile(fileext = ".zip")
tmpdir <- gsub(".zip", "/", tmpzip, fixed = TRUE)
writeBin(httr::content(search_result, as = "raw"), tmpzip)
unzip(tmpzip, exdir = tmpdir)
# get files list
xml_list <- paste0(tmpdir, list.files(path = tmpdir))
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
results_list <- lapply(xml_list, function(file) gather_results(XML::xmlParse(file)))
results_list
list(study_information = do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list)),
study_results = do.call("mapply", args = c(FUN = plyr::rbind.fill, results_list)))
devtools::load_all(".")
test <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
test
devtools::load_all(".")
test <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
test$study_results
devtools::install_github("hadley/testthat")
library(rclinicaltrials)
?test_dir
library(testthat)
?test_dir
install.packages("testthat")
install.packages("testthat")
devtools::test
check_testthat()
devtools::check_testthat()
