tmpdir <- gsub(".zip", "/", tmpzip, fixed = TRUE)
writeBin(httr::content(search_result, as = "raw"), tmpzip)
unzip(tmpzip, exdir = tmpdir)
# get files list
xml_list <- paste0(tmpdir, list.files(path = tmpdir))
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
results_list <- lapply(xml_list, function(file) gather_results(XML::xmlParse(file)))
results_list
list(study_information = do.call("mapply", args = c(FUN = plyr::rbind.fill, info_list)),
study_results = do.call("mapply", args = c(FUN = plyr::rbind.fill, results_list)))
devtools::load_all(".")
test <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
test
devtools::load_all(".")
test <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
test$study_results
devtools::install_github("hadley/testthat")
library(rclinicaltrials)
?test_dir
library(testthat)
?test_dir
install.packages("testthat")
install.packages("testthat")
devtools::test
check_testthat()
devtools::check_testthat()
install_github("rstudio/devtools")
devtools::install_github("rstudio/devtools")
devtools::test()
library(testthat)
library(rclinicaltrials)
test_check("rclinicaltrials")
?test_check
library(rclinicaltrials)
library(testthat)
library(rclinicaltrials)
test_check("rclinicaltrials")
context("basic searches")
test_that("all results, no results, and standard search doesn't return error", {
# blank search returns all results
expect_more_than(clinicaltrials_count(""), 1000)
expect_more_than(clinicaltrials_count(), 1000)
# random string search returns 0
expect_equal(clinicaltrials_count("kajshdg028345245lkjh"), 0)
# standard search works
expect_more_than(clinicaltrials_count("heart disease"), 1)
# advanced search works
expect_more_than(clinicaltrials_count(query = c('recr=Open', 'type=Intr', 'cond=melanoma')), 1)
# blank search returns all results
expect_equal(nrow(clinicaltrials_search("", count = 10)), 10)
# random string search returns 0
expect_error(clinicaltrials_search("kajshdg028345245lkjh"))
# standard search works
expect_equal(nrow(clinicaltrials_search("heart disease", count = 50)), 50)
# advanced search works
expect_more_than(nrow(clinicaltrials_search(query = c('recr=Open', 'type=Intr', 'cond=melanoma'))), 10)
# count matches search
expect_equal(nrow(clinicaltrials_search("lyme disease", count = 1e6)), clinicaltrials_count("lyme disease"))
})
context("basic downloads")
test_that("download function returns correct format", {
# download returns correct number of trials
expect_equal(clinicaltrials_count("lyme disease"), length(unique(clinicaltrials_download("lyme disease", count = 1e6)$study_info$nct_id)))
nores <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5)
res <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
expect_equal(names(nores), c("study_info", "locations", "interventions", "outcomes", "textblocks"))
expect_equal(names(res), c("study_information", "results"))
})
res
res <- clinicaltrials_download(query = 'heart disease AND stroke AND California', count = 5, include_results = TRUE)
res
names(res)
clinicaltrials_search("2408ty084t198")
melanom <- clinicaltrials_search(query = c("cond=melanoma", "phase=2", "cntry1=US"), count = 1e6)
melanom
nrow(melanom)
table(melanom$status.text)
melanom <- clinicaltrials_search(query = c("cond=melanoma", "phase=2"), count = 1e6)
nrow(melanom)
table(melanom$status.text)
melanom <- clinicaltrials_search(query = c("cond=melanoma", "phase=2", "type=Intr"), count = 1e6)
nrow(melanom)
table(melanom$status.text)
?clinicaltrials_download
melanom_information <- clinicaltrials_download(frame = melanom, count = 1e6)
melanom_information$study_info$phase
melanom_information$study_info$eligibility.gender
melanom_information$study_info$enrollment
melanom_information$study_info$enrollment.text
melanom_information <- clinicaltrials_download(frame = melanom, count = 1e6, include_results = TRUE)
melanom <- clinicaltrials_search(query = c("cond=melanoma", "phase=2", "type=Intr", "rslt=With"), count = 1e6)
melanom
nrow(melanom)
table(melanom$status.text)
melanom_information <- clinicaltrials_download(frame = melanom, count = 1e6, include_results = TRUE)
query = c("cond=melanoma", "phase=2", "type=Intr", "rslt=With")
if(is.null(frame)){
frame <- clinicaltrials_search(query, count)
}
query_url <- "http://clinicaltrials.gov/ct2/results?id="
final_url <- paste0(query_url, paste(frame$nct_id, collapse = "+OR+"))
inc_res <- ifelse(include_results, "&resultsxml=true", "&studyxml=true")
search_result <- httr::GET(paste0(final_url, inc_res))
## download and unzip to a temporary directory
tmpzip <- tempfile(fileext = ".zip")
tmpdir <- gsub(".zip", "/", tmpzip, fixed = TRUE)
writeBin(httr::content(search_result, as = "raw"), tmpzip)
unzip(tmpzip, exdir = tmpdir)
frame
frame <- NULL
frame
if(is.null(frame)){
frame <- clinicaltrials_search(query, count)
}
query_url <- "http://clinicaltrials.gov/ct2/results?id="
final_url <- paste0(query_url, paste(frame$nct_id, collapse = "+OR+"))
inc_res <- ifelse(include_results, "&resultsxml=true", "&studyxml=true")
search_result <- httr::GET(paste0(final_url, inc_res))
## download and unzip to a temporary directory
tmpzip <- tempfile(fileext = ".zip")
tmpdir <- gsub(".zip", "/", tmpzip, fixed = TRUE)
writeBin(httr::content(search_result, as = "raw"), tmpzip)
unzip(tmpzip, exdir = tmpdir)
count <- 20
include_results = TRUE
if(is.null(frame)){
frame <- clinicaltrials_search(query, count)
}
query_url <- "http://clinicaltrials.gov/ct2/results?id="
final_url <- paste0(query_url, paste(frame$nct_id, collapse = "+OR+"))
inc_res <- ifelse(include_results, "&resultsxml=true", "&studyxml=true")
search_result <- httr::GET(paste0(final_url, inc_res))
## download and unzip to a temporary directory
tmpzip <- tempfile(fileext = ".zip")
tmpdir <- gsub(".zip", "/", tmpzip, fixed = TRUE)
writeBin(httr::content(search_result, as = "raw"), tmpzip)
unzip(tmpzip, exdir = tmpdir)
xml_list <- paste0(tmpdir, list.files(path = tmpdir))
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
devtools::load_all(".")
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
include_textblocks = FALSE
info_list <- lapply(xml_list, parse_study_xml, include_textblocks)
for(i in xml_list) gather_results(XML::xmlParse(i))
i
file <- i
parsed <- XML::xmlParse(i)
parsed[["//clinical_results"]]
this_nct_id <- XML::xmlValue(parsed[["//nct_id"]])
gp_look <- get_group_lookup(parsed, "//participant_flow/group_list")
period <- parsed[["//period_list/period/milestone_list"]]
flow_table <- do.call(plyr::rbind.fill, XML::xmlApply(period, function(node){
cbind(
title = XML::xmlValue(node),
data.frame(t(XML::xmlSApply(node[[2]], XML::xmlAttrs)), row.names = 1:length(gp_look), stringsAsFactors = FALSE)
)
}))
flow_table$arm <- gp_look[flow_table$group_id]
flow_table$nct_id <- this_nct_id
gp_look <- get_group_lookup(parsed, "//baseline/group_list")
measures <- parsed[["//baseline/measure_list"]]
baseline_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
tmpRes <- XML::xmlApply(n0[["measurement_list"]], function(x){
as.data.frame(t(XML::xmlAttrs(x)))
})
ResAdd <- do.call(plyr::rbind.fill, tmpRes)
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
ResAdd),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
baseline_table
baseline_table$arm <- gp_look[baseline_table$group_id]
baseline_table$nct_id <- this_nct_id
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
parsed[["//clinical_results/outcome_list"]]
parsed_out <- parsed[["//clinical_results/outcome_list"]][[1]]
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
})
)
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
parsed_out <- parsed[["//clinical_results/outcome_list"]][[2]]
parsed_out
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
measures
devtools::load_all(".")
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
gp_look
measures
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
results_titles
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
if(!is.null(measures)) {
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
results_table$arm <- gp_look[results_table$group_id]
} else results_table <- NULL
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
})
final_outcome_table <- do.call(plyr::rbind.fill, all_results_list)
all_results_list
results_titles
data.frame(results_titles)
all_results_list <- XML::xmlApply(parsed[["//clinical_results/outcome_list"]], function(parsed_out){
gp_look <- get_group_lookup(parsed_out, "group_list")
measures <- parsed_out[["measure_list"]]
results_titles <- XML::xmlApply(parsed_out, function(node){
if(XML::xmlName(node) %in% c("group_list", "measure_list")) return(NULL) else {
XML::xmlValue(node)
}
})
if(!is.null(measures)) {
results_table <- do.call(plyr::rbind.fill, XML::xmlApply(measures, function(node){
#outer most level: titles and units
lank <- XML::xmlSApply(node, function(n){
# category_list -> return sub-titles
if(XML::xmlName(n) == "category_list"){
do.call(plyr::rbind.fill, XML::xmlApply(n, function(n0){
data.frame(
cbind(
subtitle = XML::xmlValue(n0),
t(XML::xmlSApply(n0[["measurement_list"]], XML::xmlAttrs))),
row.names = NULL)
}))
} else {
XML::xmlValue(n)
}
})
target <- lank$category_list
fillout <- lank[names(lank) != "category_list"]
cbind(fillout, target)
}))
results_table$arm <- gp_look[results_table$group_id]
cbind(results_titles[!names(results_titles) %in% c("group_list", "measure_list")],
results_table)
} else data.frame(results_titles)
})
final_outcome_table <- do.call(plyr::rbind.fill, all_results_list)
final_outcome_table$nct_id <- this_nct_id
final_outcome_table
all_results_list
devtools::load_all(".")
melanom_information <- clinicaltrials_download(frame = melanom, count = 1e6, include_results = TRUE)
melanom_information$study_info$enrollment.text
melanom_information$study_results
melanom_information$study_results$baseline_data
summary(melanom_information$study_results$baseline_data)
table(melanom_information$study_results$baseline_data$title)
gend_data <- subset(melanom_information$study_results$baseline_data, title == "Gender")
gend_data
library(plyr)
gend_data <- subset(melanom_information$study_results$baseline_data, title == "Gender" & arm == "Total")
length(unique(gend_data$nct_id))
gend_data <- subset(melanom_information$study_results$baseline_data, title == "Gender" & arm != "Total")
length(unique(gend_data$nct_id))
ddply(gend_data, ~ nct_id, function(df){
data.frame(
Female_count = subset(df, subtitle == "Female")$value,
Male_count = subset(df, subtitle == "Male")$value
)
})
gend_data <- subset(melanom_information$study_results$baseline_data, title == "Gender" & arm != "Total")
ddply(gend_data, ~ nct_id, function(df){
data.frame(
Female_count = subset(df, subtitle == "Female")$value,
Male_count = subset(df, subtitle == "Male")$value
)
})
ddply(gend_data, ~ nct_id, function(df){
data.frame(
Female_count = sum(subset(df, subtitle == "Female")$value, na.rm = TRUE),
Male_count = sum(subset(df, subtitle == "Male")$value, na.rm = TRUE)
)
})
ddply(gend_data, ~ nct_id, function(df){
data.frame(
Female_count = sum(as.numeric(paste(subset(df, subtitle == "Female")$value)), na.rm = TRUE),
Male_count = sum(as.numeric(paste(subset(df, subtitle == "Male")$value)), na.rm = TRUE)
)
})
melanom_information$study_information$study_info
colnames(melanom_information$study_information$study_info)
(melanom_information$study_information$study_info$start_date)
dates <- melanom_information$study_information$study_info[, c("nct_id", "start_date")]
strsplit(dates$start_date, " ")
?strsplit
strsplit(paste(dates$start_date), " ")
dates$year <- sapply(strsplit(paste(dates$start_date), " "), function(d) as.numeric(d[2]))
dates
counts <- merge(gender_counts, dates, by = "nct_id")
gender_counts <- ddply(gend_data, ~ nct_id, function(df){
data.frame(
Female_count = sum(as.numeric(paste(subset(df, subtitle == "Female")$value)), na.rm = TRUE),
Male_count = sum(as.numeric(paste(subset(df, subtitle == "Male")$value)), na.rm = TRUE)
)
})
dates <- melanom_information$study_information$study_info[, c("nct_id", "start_date")]
dates$year <- sapply(strsplit(paste(dates$start_date), " "), function(d) as.numeric(d[2]))
counts <- merge(gender_counts, dates, by = "nct_id")
table(counts)
gender_counts <- ddply(gend_data, ~ nct_id + subtitle, function(df){
data.frame(
count = sum(as.numeric(paste(df$value)), na.rm = TRUE)
)
})
gender_counts
dates <- melanom_information$study_information$study_info[, c("nct_id", "start_date")]
dates$year <- sapply(strsplit(paste(dates$start_date), " "), function(d) as.numeric(d[2]))
counts <- merge(gender_counts, dates, by = "nct_id")
?geom_line
library(ggplot2)
geom_line
?geom_line
?scale_color_manual
ggplot(counts, aes(x = year, y = count, color = subtitle)) + geom_line() + scale_color_manual("Gender")
ggplot(counts, aes(x = year, y = count, color = subtitle)) + geom_line() + scale_color("Gender")
ggplot(counts, aes(x = year, y = count, color = subtitle)) + geom_line()
ggplot(counts, aes(x = year, y = cumsum(count), color = subtitle)) + geom_line()
ggplot(counts, aes(x = year, y = cumsum(count), color = subtitle)) + geom_line() + geom_point()
counts
ddply(counts, ~ subtitle + date, summarize, cum_count = cumsum(count))
ddply(counts, ~ year + subtitle, summarize, cum_count = cumsum(count))
ddply(counts, ~ year + subtitle, summarize, cum_count = sum(count))
ggplot(cts, aes(x = year, y = cumsum(count), color = subtitle)) + geom_line() + geom_point()
cts <- ddply(counts, ~ year + subtitle, summarize, cum_count = sum(count))
ggplot(cts, aes(x = year, y = cumsum(count), color = subtitle)) + geom_line() + geom_point()
cts
cts <- ddply(counts, ~ year + subtitle, summarize, count = sum(count))
ggplot(cts, aes(x = year, y = cumsum(count), color = subtitle)) + geom_line() + geom_point()
ggplot(cts, aes(x = year, y = cumsum(count), color = subtitle)) +
geom_line() + geom_point() + labs(title = "Cumulative enrollment into Phase III, interventional trials in Melanoma, by gender")
colnames(cts)
library(rclinicaltrials)
vignette("rclinicaltrials", "rclinicaltrials")
vignettes("rclinicaltrials", "rclinicaltrials")
vignette("rclinicaltrials")
?rclinicaltrials
library(rclinicaltrials)
vignette("rclinicaltrials")
?vignettes
vignette(package = "rclinicaltrials")
library(rclinicaltrials)
clinicaltrials_count(query = c("type=Intr", "cond=cancer"))
advanced_search_terms
clinicaltrials_count(query = "29485tksrw@")
library(rclinicaltrials)
vignette("rclinicaltrials", "rclinicaltrials")
vignette("rclinicaltrials", "rclinicaltrials")
